{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\courses\\\\Angular\\\\projects\\\\sales-taxes-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ReceiptComponent } from './receipt.component';\ndescribe('ReceiptComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [ReactiveFormsModule, FormsModule],\n      declarations: [ReceiptComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ReceiptComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    component.ngOnInit();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('customRound method calculation', () => {\n    console.log('start');\n    expect(component.customRound(14.99 + 6.75)).toContain('21.75');\n  });\n  it('clearAll method calculation', () => {\n    component.clearAll();\n    expect(component.items).toHaveSize(0);\n    expect(component.receipt).toHaveSize(0);\n    expect(component.receiptPrinted).toBe(false);\n    expect(component.totalTaxAmount).toBe(0);\n    expect(component.totalAmount).toBe(0);\n  });\n  it('invalid form when empty', () => {\n    expect(component.itemForm.valid).toBeFalsy();\n  });\n  it('quantity field validity', () => {\n    let quantity = component.itemForm.controls['quantity']; // negative numbers is not allowed\n\n    quantity.setValue(-1);\n    expect(quantity.valid).toBeFalsy(); // minimum number should be 1\n\n    quantity.setValue(0);\n    expect(quantity.valid).toBeFalsy(); // floating number is not allowed\n\n    quantity.setValue(2.4);\n    expect(quantity.valid).toBeFalsy(); // string is not allowed\n\n    quantity.setValue('q');\n    expect(quantity.valid).toBeFalsy();\n  });\n  it('description field validity', () => {\n    let description = component.itemForm.controls['desc']; // it is not valid when description is empty\n\n    expect(description.valid).toBeFalsy();\n  });\n  it('should add a product', () => {\n    console.log('start');\n  });\n  it('should add a product', () => {\n    console.log('start');\n  });\n  /* it('should render title', () => {\r\n    const fixture = TestBed.createComponent(AppComponent);\r\n    fixture.detectChanges();\r\n    const compiled = fixture.nativeElement as HTMLElement;\r\n    console.log(compiled);\r\n    expect(compiled.querySelector('.content span')?.textContent).toContain(\r\n      'sales-taxes-app app is running!'\r\n    );\r\n  }); */\n});","map":{"version":3,"sources":["D:/courses/Angular/projects/sales-taxes-app/src/app/receipt/receipt.component.spec.ts"],"names":["TestBed","FormsModule","ReactiveFormsModule","ReceiptComponent","describe","component","fixture","beforeEach","configureTestingModule","imports","declarations","compileComponents","createComponent","componentInstance","detectChanges","ngOnInit","it","expect","toBeTruthy","console","log","customRound","toContain","clearAll","items","toHaveSize","receipt","receiptPrinted","toBe","totalTaxAmount","totalAmount","itemForm","valid","toBeFalsy","quantity","controls","setValue","description"],"mappings":";AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,WAAT,EAAsBC,mBAAtB,QAAiD,gBAAjD;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACAC,QAAQ,CAAC,kBAAD,EAAqB,MAAM;AAC/B,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMP,OAAO,CAACQ,sBAAR,CAA+B;AACjCC,MAAAA,OAAO,EAAE,CAACP,mBAAD,EAAsBD,WAAtB,CADwB;AAEjCS,MAAAA,YAAY,EAAE,CAACP,gBAAD;AAFmB,KAA/B,EAGHQ,iBAHG,EAAN;AAIH,GALS,EAAV;AAMAJ,EAAAA,UAAU,CAAC,MAAM;AACbD,IAAAA,OAAO,GAAGN,OAAO,CAACY,eAAR,CAAwBT,gBAAxB,CAAV;AACAE,IAAAA,SAAS,GAAGC,OAAO,CAACO,iBAApB;AACAP,IAAAA,OAAO,CAACQ,aAAR;AACAT,IAAAA,SAAS,CAACU,QAAV;AACH,GALS,CAAV;AAMAC,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtBC,IAAAA,MAAM,CAACZ,SAAD,CAAN,CAAkBa,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,gCAAD,EAAmC,MAAM;AACvCG,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAH,IAAAA,MAAM,CAACZ,SAAS,CAACgB,WAAV,CAAsB,QAAQ,IAA9B,CAAD,CAAN,CAA4CC,SAA5C,CAAsD,OAAtD;AACH,GAHC,CAAF;AAIAN,EAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACpCX,IAAAA,SAAS,CAACkB,QAAV;AACAN,IAAAA,MAAM,CAACZ,SAAS,CAACmB,KAAX,CAAN,CAAwBC,UAAxB,CAAmC,CAAnC;AACAR,IAAAA,MAAM,CAACZ,SAAS,CAACqB,OAAX,CAAN,CAA0BD,UAA1B,CAAqC,CAArC;AACAR,IAAAA,MAAM,CAACZ,SAAS,CAACsB,cAAX,CAAN,CAAiCC,IAAjC,CAAsC,KAAtC;AACAX,IAAAA,MAAM,CAACZ,SAAS,CAACwB,cAAX,CAAN,CAAiCD,IAAjC,CAAsC,CAAtC;AACAX,IAAAA,MAAM,CAACZ,SAAS,CAACyB,WAAX,CAAN,CAA8BF,IAA9B,CAAmC,CAAnC;AACH,GAPC,CAAF;AAQAZ,EAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAChCC,IAAAA,MAAM,CAACZ,SAAS,CAAC0B,QAAV,CAAmBC,KAApB,CAAN,CAAiCC,SAAjC;AACH,GAFC,CAAF;AAGAjB,EAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAChC,QAAIkB,QAAQ,GAAG7B,SAAS,CAAC0B,QAAV,CAAmBI,QAAnB,CAA4B,UAA5B,CAAf,CADgC,CAEhC;;AACAD,IAAAA,QAAQ,CAACE,QAAT,CAAkB,CAAC,CAAnB;AACAnB,IAAAA,MAAM,CAACiB,QAAQ,CAACF,KAAV,CAAN,CAAuBC,SAAvB,GAJgC,CAKhC;;AACAC,IAAAA,QAAQ,CAACE,QAAT,CAAkB,CAAlB;AACAnB,IAAAA,MAAM,CAACiB,QAAQ,CAACF,KAAV,CAAN,CAAuBC,SAAvB,GAPgC,CAQhC;;AACAC,IAAAA,QAAQ,CAACE,QAAT,CAAkB,GAAlB;AACAnB,IAAAA,MAAM,CAACiB,QAAQ,CAACF,KAAV,CAAN,CAAuBC,SAAvB,GAVgC,CAWhC;;AACAC,IAAAA,QAAQ,CAACE,QAAT,CAAkB,GAAlB;AACAnB,IAAAA,MAAM,CAACiB,QAAQ,CAACF,KAAV,CAAN,CAAuBC,SAAvB;AACH,GAdC,CAAF;AAeAjB,EAAAA,EAAE,CAAC,4BAAD,EAA+B,MAAM;AACnC,QAAIqB,WAAW,GAAGhC,SAAS,CAAC0B,QAAV,CAAmBI,QAAnB,CAA4B,MAA5B,CAAlB,CADmC,CAEnC;;AACAlB,IAAAA,MAAM,CAACoB,WAAW,CAACL,KAAb,CAAN,CAA0BC,SAA1B;AACH,GAJC,CAAF;AAKAjB,EAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC7BG,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,GAFC,CAAF;AAGAJ,EAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC7BG,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,GAFC,CAAF;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CApEO,CAAR","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ReceiptComponent } from './receipt.component';\r\ndescribe('ReceiptComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            imports: [ReactiveFormsModule, FormsModule],\r\n            declarations: [ReceiptComponent],\r\n        }).compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(ReceiptComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n        component.ngOnInit();\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('customRound method calculation', () => {\r\n        console.log('start');\r\n        expect(component.customRound(14.99 + 6.75)).toContain('21.75');\r\n    });\r\n    it('clearAll method calculation', () => {\r\n        component.clearAll();\r\n        expect(component.items).toHaveSize(0);\r\n        expect(component.receipt).toHaveSize(0);\r\n        expect(component.receiptPrinted).toBe(false);\r\n        expect(component.totalTaxAmount).toBe(0);\r\n        expect(component.totalAmount).toBe(0);\r\n    });\r\n    it('invalid form when empty', () => {\r\n        expect(component.itemForm.valid).toBeFalsy();\r\n    });\r\n    it('quantity field validity', () => {\r\n        let quantity = component.itemForm.controls['quantity'];\r\n        // negative numbers is not allowed\r\n        quantity.setValue(-1);\r\n        expect(quantity.valid).toBeFalsy();\r\n        // minimum number should be 1\r\n        quantity.setValue(0);\r\n        expect(quantity.valid).toBeFalsy();\r\n        // floating number is not allowed\r\n        quantity.setValue(2.4);\r\n        expect(quantity.valid).toBeFalsy();\r\n        // string is not allowed\r\n        quantity.setValue('q');\r\n        expect(quantity.valid).toBeFalsy();\r\n    });\r\n    it('description field validity', () => {\r\n        let description = component.itemForm.controls['desc'];\r\n        // it is not valid when description is empty\r\n        expect(description.valid).toBeFalsy();\r\n    });\r\n    it('should add a product', () => {\r\n        console.log('start');\r\n    });\r\n    it('should add a product', () => {\r\n        console.log('start');\r\n    });\r\n    /* it('should render title', () => {\r\n      const fixture = TestBed.createComponent(AppComponent);\r\n      fixture.detectChanges();\r\n      const compiled = fixture.nativeElement as HTMLElement;\r\n      console.log(compiled);\r\n      expect(compiled.querySelector('.content span')?.textContent).toContain(\r\n        'sales-taxes-app app is running!'\r\n      );\r\n    }); */\r\n});\r\n"]},"metadata":{},"sourceType":"module"}