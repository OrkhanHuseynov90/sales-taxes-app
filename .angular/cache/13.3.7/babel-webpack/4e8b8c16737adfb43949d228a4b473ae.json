{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\courses\\\\Angular\\\\projects\\\\sales-taxes-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ReceiptComponent } from './receipt.component';\ndescribe('ReceiptComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [ReactiveFormsModule, FormsModule],\n      declarations: [ReceiptComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ReceiptComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    component.ngOnInit();\n  });\n  it('should create the Receipt Component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('customRound method calculation', () => {\n    expect(component.customRound(14.99 + 6.75)).toContain('21.75');\n  });\n  it('clearAll method calculation', () => {\n    component.clearAll();\n    expect(component.items).toHaveSize(0);\n    expect(component.receipt).toHaveSize(0);\n    expect(component.receiptPrinted).toBe(false);\n    expect(component.totalTaxAmount).toBe(0);\n    expect(component.totalAmount).toBe(0);\n  });\n  it('invalid form when empty', () => {\n    expect(component.itemForm.valid).toBeFalsy();\n  });\n  it('quantity field validity', () => {\n    let quantity = component.itemForm.controls['quantity']; // empty field is not allowed\n\n    expect(quantity.valid).toBeFalsy(); // minimum number should be 1\n\n    quantity.setValue(0);\n    expect(quantity.valid).toBeFalsy(); // floating number is not allowed\n\n    quantity.setValue(2.4);\n    expect(quantity.valid).toBeFalsy(); // string is not allowed\n\n    quantity.setValue('q');\n    expect(quantity.valid).toBeFalsy();\n  });\n  it('description field validity', () => {\n    let description = component.itemForm.controls['desc']; // empty field is not allowed\n\n    expect(description.valid).toBeFalsy();\n  });\n  it('price field validity', () => {\n    let price = component.itemForm.controls['price']; // empty field is not allowed\n\n    expect(price.valid).toBeFalsy(); // price should be more than 0.001\n\n    price.setValue(0);\n    expect(price.valid).toBeFalsy();\n  });\n  it('type field validity', () => {\n    let type = component.itemForm.controls['type']; // empty field is not allowed\n\n    expect(type.valid).toBeFalsy();\n  });\n  it('adding a created item to a basket', () => {\n    // initial form is not valid\n    expect(component.itemForm.valid).toBeFalsy(); // list of items is empty\n\n    expect(component.items).toHaveSize(0);\n    component.itemForm.controls['quantity'].setValue(1);\n    component.itemForm.controls['desc'].setValue('music CD');\n    component.itemForm.controls['price'].setValue(14.99);\n    component.itemForm.controls['type'].setValue('other');\n    component.onAdd(); // list contains an item after creating and adding to basket\n\n    expect(component.items).toHaveSize(1);\n  });\n  it('calculate tax and total amount', () => {\n    // initial form is not valid\n    expect(component.itemForm.valid).toBeFalsy(); // list of items is empty\n\n    expect(component.items).toHaveSize(0); // receipt list is empty\n\n    expect(component.receipt).toHaveSize(0);\n    component.itemForm.controls['quantity'].setValue(1);\n    component.itemForm.controls['desc'].setValue('music CD');\n    component.itemForm.controls['price'].setValue(14.99);\n    component.itemForm.controls['type'].setValue('other');\n    component.onAdd();\n    component.calculateReceipt(); // list contains an item after creating and adding to basket\n\n    expect(component.items).toHaveSize(1); // receipt list contains an item after printing receipt\n\n    expect(component.receipt).toHaveSize(1); // total tax calculation\n\n    expect(component.totalTaxAmount).toBe(1.5); // total amount calculation\n\n    expect(component.totalAmount).toBe(16.49);\n  });\n});","map":{"version":3,"sources":["D:/courses/Angular/projects/sales-taxes-app/src/app/receipt/receipt.component.spec.ts"],"names":["TestBed","FormsModule","ReactiveFormsModule","ReceiptComponent","describe","component","fixture","beforeEach","configureTestingModule","imports","declarations","compileComponents","createComponent","componentInstance","detectChanges","ngOnInit","it","expect","toBeTruthy","customRound","toContain","clearAll","items","toHaveSize","receipt","receiptPrinted","toBe","totalTaxAmount","totalAmount","itemForm","valid","toBeFalsy","quantity","controls","setValue","description","price","type","onAdd","calculateReceipt"],"mappings":";AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,WAAT,EAAsBC,mBAAtB,QAAiD,gBAAjD;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACAC,QAAQ,CAAC,kBAAD,EAAqB,MAAM;AAC/B,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMP,OAAO,CAACQ,sBAAR,CAA+B;AACjCC,MAAAA,OAAO,EAAE,CAACP,mBAAD,EAAsBD,WAAtB,CADwB;AAEjCS,MAAAA,YAAY,EAAE,CAACP,gBAAD;AAFmB,KAA/B,EAGHQ,iBAHG,EAAN;AAIH,GALS,EAAV;AAMAJ,EAAAA,UAAU,CAAC,MAAM;AACbD,IAAAA,OAAO,GAAGN,OAAO,CAACY,eAAR,CAAwBT,gBAAxB,CAAV;AACAE,IAAAA,SAAS,GAAGC,OAAO,CAACO,iBAApB;AACAP,IAAAA,OAAO,CAACQ,aAAR;AACAT,IAAAA,SAAS,CAACU,QAAV;AACH,GALS,CAAV;AAMAC,EAAAA,EAAE,CAAC,qCAAD,EAAwC,MAAM;AAC5CC,IAAAA,MAAM,CAACZ,SAAD,CAAN,CAAkBa,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,gCAAD,EAAmC,MAAM;AACvCC,IAAAA,MAAM,CAACZ,SAAS,CAACc,WAAV,CAAsB,QAAQ,IAA9B,CAAD,CAAN,CAA4CC,SAA5C,CAAsD,OAAtD;AACH,GAFC,CAAF;AAGAJ,EAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACpCX,IAAAA,SAAS,CAACgB,QAAV;AACAJ,IAAAA,MAAM,CAACZ,SAAS,CAACiB,KAAX,CAAN,CAAwBC,UAAxB,CAAmC,CAAnC;AACAN,IAAAA,MAAM,CAACZ,SAAS,CAACmB,OAAX,CAAN,CAA0BD,UAA1B,CAAqC,CAArC;AACAN,IAAAA,MAAM,CAACZ,SAAS,CAACoB,cAAX,CAAN,CAAiCC,IAAjC,CAAsC,KAAtC;AACAT,IAAAA,MAAM,CAACZ,SAAS,CAACsB,cAAX,CAAN,CAAiCD,IAAjC,CAAsC,CAAtC;AACAT,IAAAA,MAAM,CAACZ,SAAS,CAACuB,WAAX,CAAN,CAA8BF,IAA9B,CAAmC,CAAnC;AACH,GAPC,CAAF;AAQAV,EAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAChCC,IAAAA,MAAM,CAACZ,SAAS,CAACwB,QAAV,CAAmBC,KAApB,CAAN,CAAiCC,SAAjC;AACH,GAFC,CAAF;AAGAf,EAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAChC,QAAIgB,QAAQ,GAAG3B,SAAS,CAACwB,QAAV,CAAmBI,QAAnB,CAA4B,UAA5B,CAAf,CADgC,CAEhC;;AACAhB,IAAAA,MAAM,CAACe,QAAQ,CAACF,KAAV,CAAN,CAAuBC,SAAvB,GAHgC,CAIhC;;AACAC,IAAAA,QAAQ,CAACE,QAAT,CAAkB,CAAlB;AACAjB,IAAAA,MAAM,CAACe,QAAQ,CAACF,KAAV,CAAN,CAAuBC,SAAvB,GANgC,CAOhC;;AACAC,IAAAA,QAAQ,CAACE,QAAT,CAAkB,GAAlB;AACAjB,IAAAA,MAAM,CAACe,QAAQ,CAACF,KAAV,CAAN,CAAuBC,SAAvB,GATgC,CAUhC;;AACAC,IAAAA,QAAQ,CAACE,QAAT,CAAkB,GAAlB;AACAjB,IAAAA,MAAM,CAACe,QAAQ,CAACF,KAAV,CAAN,CAAuBC,SAAvB;AACH,GAbC,CAAF;AAcAf,EAAAA,EAAE,CAAC,4BAAD,EAA+B,MAAM;AACnC,QAAImB,WAAW,GAAG9B,SAAS,CAACwB,QAAV,CAAmBI,QAAnB,CAA4B,MAA5B,CAAlB,CADmC,CAEnC;;AACAhB,IAAAA,MAAM,CAACkB,WAAW,CAACL,KAAb,CAAN,CAA0BC,SAA1B;AACH,GAJC,CAAF;AAKAf,EAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC7B,QAAIoB,KAAK,GAAG/B,SAAS,CAACwB,QAAV,CAAmBI,QAAnB,CAA4B,OAA5B,CAAZ,CAD6B,CAE7B;;AACAhB,IAAAA,MAAM,CAACmB,KAAK,CAACN,KAAP,CAAN,CAAoBC,SAApB,GAH6B,CAI7B;;AACAK,IAAAA,KAAK,CAACF,QAAN,CAAe,CAAf;AACAjB,IAAAA,MAAM,CAACmB,KAAK,CAACN,KAAP,CAAN,CAAoBC,SAApB;AACH,GAPC,CAAF;AAQAf,EAAAA,EAAE,CAAC,qBAAD,EAAwB,MAAM;AAC5B,QAAIqB,IAAI,GAAGhC,SAAS,CAACwB,QAAV,CAAmBI,QAAnB,CAA4B,MAA5B,CAAX,CAD4B,CAE5B;;AACAhB,IAAAA,MAAM,CAACoB,IAAI,CAACP,KAAN,CAAN,CAAmBC,SAAnB;AACH,GAJC,CAAF;AAKAf,EAAAA,EAAE,CAAC,mCAAD,EAAsC,MAAM;AAC1C;AACAC,IAAAA,MAAM,CAACZ,SAAS,CAACwB,QAAV,CAAmBC,KAApB,CAAN,CAAiCC,SAAjC,GAF0C,CAG1C;;AACAd,IAAAA,MAAM,CAACZ,SAAS,CAACiB,KAAX,CAAN,CAAwBC,UAAxB,CAAmC,CAAnC;AACAlB,IAAAA,SAAS,CAACwB,QAAV,CAAmBI,QAAnB,CAA4B,UAA5B,EAAwCC,QAAxC,CAAiD,CAAjD;AACA7B,IAAAA,SAAS,CAACwB,QAAV,CAAmBI,QAAnB,CAA4B,MAA5B,EAAoCC,QAApC,CAA6C,UAA7C;AACA7B,IAAAA,SAAS,CAACwB,QAAV,CAAmBI,QAAnB,CAA4B,OAA5B,EAAqCC,QAArC,CAA8C,KAA9C;AACA7B,IAAAA,SAAS,CAACwB,QAAV,CAAmBI,QAAnB,CAA4B,MAA5B,EAAoCC,QAApC,CAA6C,OAA7C;AACA7B,IAAAA,SAAS,CAACiC,KAAV,GAT0C,CAU1C;;AACArB,IAAAA,MAAM,CAACZ,SAAS,CAACiB,KAAX,CAAN,CAAwBC,UAAxB,CAAmC,CAAnC;AACH,GAZC,CAAF;AAaAP,EAAAA,EAAE,CAAC,gCAAD,EAAmC,MAAM;AACvC;AACAC,IAAAA,MAAM,CAACZ,SAAS,CAACwB,QAAV,CAAmBC,KAApB,CAAN,CAAiCC,SAAjC,GAFuC,CAGvC;;AACAd,IAAAA,MAAM,CAACZ,SAAS,CAACiB,KAAX,CAAN,CAAwBC,UAAxB,CAAmC,CAAnC,EAJuC,CAKvC;;AACAN,IAAAA,MAAM,CAACZ,SAAS,CAACmB,OAAX,CAAN,CAA0BD,UAA1B,CAAqC,CAArC;AACAlB,IAAAA,SAAS,CAACwB,QAAV,CAAmBI,QAAnB,CAA4B,UAA5B,EAAwCC,QAAxC,CAAiD,CAAjD;AACA7B,IAAAA,SAAS,CAACwB,QAAV,CAAmBI,QAAnB,CAA4B,MAA5B,EAAoCC,QAApC,CAA6C,UAA7C;AACA7B,IAAAA,SAAS,CAACwB,QAAV,CAAmBI,QAAnB,CAA4B,OAA5B,EAAqCC,QAArC,CAA8C,KAA9C;AACA7B,IAAAA,SAAS,CAACwB,QAAV,CAAmBI,QAAnB,CAA4B,MAA5B,EAAoCC,QAApC,CAA6C,OAA7C;AACA7B,IAAAA,SAAS,CAACiC,KAAV;AACAjC,IAAAA,SAAS,CAACkC,gBAAV,GAZuC,CAavC;;AACAtB,IAAAA,MAAM,CAACZ,SAAS,CAACiB,KAAX,CAAN,CAAwBC,UAAxB,CAAmC,CAAnC,EAduC,CAevC;;AACAN,IAAAA,MAAM,CAACZ,SAAS,CAACmB,OAAX,CAAN,CAA0BD,UAA1B,CAAqC,CAArC,EAhBuC,CAiBvC;;AACAN,IAAAA,MAAM,CAACZ,SAAS,CAACsB,cAAX,CAAN,CAAiCD,IAAjC,CAAsC,GAAtC,EAlBuC,CAmBvC;;AACAT,IAAAA,MAAM,CAACZ,SAAS,CAACuB,WAAX,CAAN,CAA8BF,IAA9B,CAAmC,KAAnC;AACH,GArBC,CAAF;AAsBH,CAnGO,CAAR","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ReceiptComponent } from './receipt.component';\r\ndescribe('ReceiptComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            imports: [ReactiveFormsModule, FormsModule],\r\n            declarations: [ReceiptComponent],\r\n        }).compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(ReceiptComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n        component.ngOnInit();\r\n    });\r\n    it('should create the Receipt Component', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('customRound method calculation', () => {\r\n        expect(component.customRound(14.99 + 6.75)).toContain('21.75');\r\n    });\r\n    it('clearAll method calculation', () => {\r\n        component.clearAll();\r\n        expect(component.items).toHaveSize(0);\r\n        expect(component.receipt).toHaveSize(0);\r\n        expect(component.receiptPrinted).toBe(false);\r\n        expect(component.totalTaxAmount).toBe(0);\r\n        expect(component.totalAmount).toBe(0);\r\n    });\r\n    it('invalid form when empty', () => {\r\n        expect(component.itemForm.valid).toBeFalsy();\r\n    });\r\n    it('quantity field validity', () => {\r\n        let quantity = component.itemForm.controls['quantity'];\r\n        // empty field is not allowed\r\n        expect(quantity.valid).toBeFalsy();\r\n        // minimum number should be 1\r\n        quantity.setValue(0);\r\n        expect(quantity.valid).toBeFalsy();\r\n        // floating number is not allowed\r\n        quantity.setValue(2.4);\r\n        expect(quantity.valid).toBeFalsy();\r\n        // string is not allowed\r\n        quantity.setValue('q');\r\n        expect(quantity.valid).toBeFalsy();\r\n    });\r\n    it('description field validity', () => {\r\n        let description = component.itemForm.controls['desc'];\r\n        // empty field is not allowed\r\n        expect(description.valid).toBeFalsy();\r\n    });\r\n    it('price field validity', () => {\r\n        let price = component.itemForm.controls['price'];\r\n        // empty field is not allowed\r\n        expect(price.valid).toBeFalsy();\r\n        // price should be more than 0.001\r\n        price.setValue(0);\r\n        expect(price.valid).toBeFalsy();\r\n    });\r\n    it('type field validity', () => {\r\n        let type = component.itemForm.controls['type'];\r\n        // empty field is not allowed\r\n        expect(type.valid).toBeFalsy();\r\n    });\r\n    it('adding a created item to a basket', () => {\r\n        // initial form is not valid\r\n        expect(component.itemForm.valid).toBeFalsy();\r\n        // list of items is empty\r\n        expect(component.items).toHaveSize(0);\r\n        component.itemForm.controls['quantity'].setValue(1);\r\n        component.itemForm.controls['desc'].setValue('music CD');\r\n        component.itemForm.controls['price'].setValue(14.99);\r\n        component.itemForm.controls['type'].setValue('other');\r\n        component.onAdd();\r\n        // list contains an item after creating and adding to basket\r\n        expect(component.items).toHaveSize(1);\r\n    });\r\n    it('calculate tax and total amount', () => {\r\n        // initial form is not valid\r\n        expect(component.itemForm.valid).toBeFalsy();\r\n        // list of items is empty\r\n        expect(component.items).toHaveSize(0);\r\n        // receipt list is empty\r\n        expect(component.receipt).toHaveSize(0);\r\n        component.itemForm.controls['quantity'].setValue(1);\r\n        component.itemForm.controls['desc'].setValue('music CD');\r\n        component.itemForm.controls['price'].setValue(14.99);\r\n        component.itemForm.controls['type'].setValue('other');\r\n        component.onAdd();\r\n        component.calculateReceipt();\r\n        // list contains an item after creating and adding to basket\r\n        expect(component.items).toHaveSize(1);\r\n        // receipt list contains an item after printing receipt\r\n        expect(component.receipt).toHaveSize(1);\r\n        // total tax calculation\r\n        expect(component.totalTaxAmount).toBe(1.5);\r\n        // total amount calculation\r\n        expect(component.totalAmount).toBe(16.49);\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}